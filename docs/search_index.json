[["index.html", "Standardized pipelines Introduction", " Standardized pipelines Victor Loegler 2023-02-14 Introduction This book references all the bioinformatics standardized pipelines of the HaploTeam. All pipelines that are widely used across multiple projects can be described here. The purpose of this book is to improve reproducibility of the analyses by using the same protocols for recurring tasks, such as short sequencing reads mapping or SNP filtering. "],["short-reads-mapping.html", "Chapter 1 Short reads mapping", " Chapter 1 Short reads mapping Required softwares: bwa-mem2 (bwa mem can be used, but is slower) samtools gatk Short reads mapping have to be done with bwa-mem2 mem (or bwa mem) default parameters. The output of bwa can be pipped with samtools sort to output a sorted bam. The -T option allow to give a specific name to temporary files created for the sorting, which allows to sort multiple fasta in parallel in the same directory without any name conflicts. # Create reference index bwa-mem2 index reference.fasta # Run mapping bwa-mem2 mem -t 20 reference.fasta IlluminaReads_1.fq/fa IlluminaReads_2.fq/fa | samtools sort -o output.bam -T reads.Prefix.tmp Once the BAM file is generated, one can add ReadGroups (required for some downstream analyses) with gatk AddOrReplaceReadGroups. # Add read groups gatk AddOrReplaceReadGroups -I input.bam -O output.bam --RGID SampleName --RGLB SampleName --RGPL ILLUMINA --RGPU SampleName --RGSM SampleName Finally, the bam file have to be indexed with samtools index. # Index BAM samtools index input.bam "],["snps-and-indels-calling.html", "Chapter 2 SNPs and INDELs calling", " Chapter 2 SNPs and INDELs calling For variant calling, please follow instructions on this page: https://gatk.broadinstitute.org/hc/en-us/articles/360035890411-Calling-variants-on-cohorts-of-samples-using-the-HaplotypeCaller-in-GVCF-mode The final step (4. Variant recalibration) does not have to be done. "],["snp-and-indel-filtering.html", "Chapter 3 SNP and INDEL filtering 3.1 Quality filtering 3.2 Sample filtering 3.3 Split SNPs and INDELs 3.4 Filtering biallelic sites 3.5 Filter missing genotypes 3.6 Filtering the MAF 3.7 Annotate variant ID 3.8 Change chromosome names", " Chapter 3 SNP and INDEL filtering This chapter contains bcftools commands to filter multi sample VCF files. These commands were tested using bcftools 1.15.1. bcftools manual: https://samtools.github.io/bcftools/bcftools.html The order in which the commands are executed must be respected. The raw VCF should first be filtered on the genotyping quality, then a subset of samples can be filtered if needed and finally several filters can be applied on the variants dataset (missing genotype filters, frequency filters, biallelic filters, etc). WARNING: Each filter must be indicated in the file name. Example: full2489Samples.DP10.GQ20.SNPs.99pNonMissing.Biallelic.MAF5.vcf.gz The different commands can be combined with |. To accelerate the compression of the output VCF, the command bcftools view -Oz -o out.vcf.gz --threads 8can be used to parallelize the compression of the file. 3.1 Quality filtering Quality filtering is the first step to process. It includes depth filtering, genotype quality or any other filters based on quality metrics (QUAL, allele balance, etc). Loci that does not pass the thresholds must be set to missing. The allele count for each loci must then be updated bcftools +fill-tags and only loci with allele count superior to 0 must be kept bcftools view --min-ac 1. # Depth filtering 10X bcftools +setGT in.vcf.gz -- -t q -n . -e &#39;FMT/DP&gt;=10&#39; | \\ bcftools +fill-tags | \\ bcftools view --min-ac 1 # Genotype quality filtering 20 bcftools +setGT in.vcf.gz -- -t q -n . -e &#39;FMT/GQ&gt;=20&#39; | \\ bcftools +fill-tags | \\ bcftools view --min-ac 1 3.2 Sample filtering If a subset of sample must be extracted from the VCF, this is the second step to process. The list of sample to keep must be in txt format, 1 sample per line. Because some variants might be present in the total population but absent from the subset, multiallelic loci must be split into biallelic records before sample filtering. Then, sample are filtered and only loci with an allele count superior to 0 will be kept. After that, variants located at the same loci will be re-merged into multiallelic variants. The bcftools norm -m -any command splits multiallelic records The bcftools view --samples-filecommand filters samples from a txt file The bcftools +fill-tags command updates the allele count value The bcftools view --min-ac 1 keeps only sites with a minimum allele count of 1 The bcftools norm -m +any command merge variant located at the same position # Sample filtering bcftools norm -m -any in.vcf.gz | \\ bcftools view --samples-file samples.txt | \\ bcftools +fill-tags | \\ bcftools view --min-ac 1 | \\ bcftools norm -m +any 3.3 Split SNPs and INDELs In raw VCFs, SNPs and INDELs can be hard to discriminate because they can be located at the same loci (called mixed loci). Some raw VCFs also contains MNVs (= Multiple Nucleotide Variants), that can be broken down in multiple consecutive SNPs. This makes the dicrimination between SNPs and INDELs very complex. This discrimination can be done in 2 ways: The strict method The raw VCF will be split in 2 VCF: one containing only strict SNPs (no INDEL present at these loci in the population), one containing only strict INDELs (no SNP present at these loci in the population). The mixed loci will be filtered out. The complex method Another method is to set every non wanted variant as missing. The final SNP VCF will contain all the SNPs present in the population, and the non filtered INDELs (that is the one present at mixed loci) will be set to missing. It will be the other way around for the INDEL VCF. /!\\ Strict method must be favored The strict method For SNPs, all sites with * as genotype (= position is overlapping a deletion) or not SNPas type will be excluded with the command bcftools view -e 'ALT=\"*\" || type!=\"snp\"'. For INDELs, loci containing SNPs can just be removed with bcftools view -V snps,mnps,bnd,other. * alleles will be kept as they should be INDELs. # Keep only SNPs bcftools view -e &#39;ALT=&quot;*&quot; || type!=&quot;snp&quot;&#39; # Keep only INDELs bcftools view -V snps,mnps,bnd,other The complex method In order to use SNPs that are present at complex loci, INDELs present at those same loci must be set to missing. Since overlapping deletions (asterisk symbol, see https://gatk.broadinstitute.org/hc/en-us/articles/360035531912-Spanning-or-overlapping-deletions-allele- for a definition) are part of INDELs, it also have to be set to missing. However, bcftools does not handle well overlapping deletions. One can use an awk script to set every * allele to missing, with the command awk -f setAsterisksToMissing.awk, with setAsterisksToMissing.awk beeing this script: BEGIN{FS=&quot;\\t&quot;} # If field 5 (ALT column) contains * $5 ~ /\\*/{ # Define output field separator as tab OFS=&quot;\\t&quot; # Split the ALT field by comma to have each individual alt allele split($5, ALT, &quot;,&quot;) # For i in 1:len(All alt alleles) for (i in ALT){ # If the alt allele contains * if (ALT[i] ~ /\\*/){ asteriskIndex=i } } # Subsitute each asteriskIndex by &quot;.&quot; (missing genotype) for (i=10; i&lt;=NF; i++){ # Extract the genotype N=split($i, FORMAT, &quot;:&quot;) GT=FORMAT[1] # If the genotype contains the asterisk index if (GT ~ asteriskIndex){ # Split the genotypes by / or | to access each haplotype independentely split(GT, GTarray, &quot;[/|]&quot;) GT1=GTarray[1] GT2=GTarray[2] # remove oll numbers from the genotype to know the seperator ( | phased or / unphased) SEP=GT gsub(/[0-9]/, &quot;&quot;, SEP) # Change asterisk indices to missing if (GT1 == asteriskIndex){ GT1=&quot;.&quot; } if (GT2 == asteriskIndex){ GT2=&quot;.&quot; } # Reconstitute the GT NEWGT=GT1 SEP GT2 # Reconstitute the complet FORMAT string for the sample if GT was changed if (NEWGT != GT){ NEWFORMAT=NEWGT for (j=2; j&lt;=N; j++){ NEWFORMAT=NEWFORMAT &quot;:&quot; FORMAT[j] } $i=NEWFORMAT } } } print $0 } # If there is no asterisk in the ALT field, just print the line $5 !~ /\\*/{ print $0 } END{} This script will convert this: POS REF ALT Sample1 Sample2 8 A T,* 0/1 0/2 12 G *,ACC 0/0 1|2 to POS REF ALT Sample1 Sample2 8 A T,* 0/1 0/. 12 G *,ACC 0/0 .|2 Then, multiallelic loci will be split into multiple records and MNVs broken down. When splitting multiallelic loci, the unknown allele (whose genotype is informed in another row) must be set to missing. All those actions can be done with the commands bcftools norm --atomize --atom-overlaps \\. -m -any --fasta-ref reference.fasta. --atomize --fasta-ref reference.fastawill decompose complex variants, -m -any will split multiallelic loci into multiple records and --atom-overlaps \\. will use the . character (=missing genotype) for the overlapping variant. SNPs and INDELs present at the same loci will then be merged independently (SNPs with SNPs and INDELs with INDELs, but never SNPs with INDELs) with the command bcftools norm -m +both. The command bcftools view -v snpsor bcftools view -v indels will finally allow to discriminate SNPs and INDELs in 2 different VCFs. Note that when keeping INDELs, overlapping deletions (*) must not be set to missing with the awk script, as they are INDELs. Since half-missing genotypes (ex: ./1, 0|.) can be tricky to handle for some softwares, one can convert them to fully missing with bcftools. Because bcftools does not deal with half-missing phased genotypes (0|.), the phased genotypes must first be set to unphased: bcftools +setGT -- -t a -n u | bcftools +setGT -- -t ./x -n . Finally, because some known genotypes are set to missing, it is possible that some alleles are not present in the population anymore. These loci must be filtered out with bcftools norm -m -any in.vcf.gz | bcftools +fill-tags | bcftools view --min-ac 1 | bcftools norm -m +any. Multiallelic loci are split and then filtered for allele count because one allele can be lost while the other remains. For INDELs filtering, an additional bcftools view -v indels command must be used to remove loci that contained both indel and overlapping variant (ALT = *,CAA) and where the indel was set to missing, leaving only * as alternative allele. # Keep only SNPs bcftools view in.vcf.gz | awk -f setAsteriskMissing.awk | \\ bcftools norm --atomize --atom-overlaps \\. -m -any --fasta-ref reference.fasta | \\ bcftools norm -m +both | \\ bcftools view -v snps | \\ bcftools +setGT -- -t a -n u | \\ bcftools +setGT -- -t ./x -n . | \\ bcftools norm -m -any | \\ bcftools +fill-tags | \\ bcftools view --min-ac 1 | \\ bcftools norm -m +any # Keep only INDELs bcftools norm --atomize --atom-overlaps \\. -m -any --fasta-ref reference.fasta in.vcf.gz | \\ bcftools norm -m +both | \\ bcftools view -v indels | \\ bcftools +setGT -- -t a -n u | \\ bcftools +setGT -- -t ./x -n . | \\ bcftools norm -m -any | \\ bcftools +fill-tags | \\ bcftools view --min-ac 1 | \\ bcftools norm -m +any | \\ bcftools view -v indels 3.4 Filtering biallelic sites Biallelic loci can be kept with the bcftools view command, keeping loci with minimum 2 alleles (-m2) and maximum 2 alleles (-M2). # Filter biallelic (minimum and maximum 2 alleles per loci) bcftools view -m2 -M2 in.vcf.gz 3.5 Filter missing genotypes Loci with a fraction of missing genotypes too high can be removed from the VCF. This step must be done after the sample filtering, because it changes with the number of samples. # Keep only sotes with more than 99% of genotyped samples bcftools view -i &#39;F_MISSING&lt;0.01&#39; 3.6 Filtering the MAF # Sites with a MAF lower are removed bcftools view --min-af 0.05:minor 3.7 Annotate variant ID Variants ID can be annotated at any step of the filtering process, but it’s generally the lkast step of the pipeline. ID annotation must be done to be able to discriminate variants. # Set variant ID to rs_Chr_Pos_etc... bcftools annotate --set-id &#39;rs_%CHROM\\_%POS\\_%REF\\_%FIRST_ALT&#39; 3.8 Change chromosome names Some software such as PLINK requires integers as chromosome names. Chromosome names can be changed with bcftools annotate --rename-chrs # Create file that will contain name substitutions ( echo &quot;chromosome1 1&quot; echo &quot;chromosome2 2&quot; echo &quot;chromosome3 3&quot; echo &quot;chromosome4 4&quot; echo &quot;chromosome5 5&quot; echo &quot;chromosome6 6&quot; echo &quot;chromosome7 7&quot; echo &quot;chromosome8 8&quot; echo &quot;chromosome9 9&quot; echo &quot;chromosome10 10&quot; echo &quot;chromosome11 11&quot; echo &quot;chromosome12 12&quot; echo &quot;chromosome13 13&quot; echo &quot;chromosome14 14&quot; echo &quot;chromosome15 15&quot; echo &quot;chromosome16 16&quot;) &gt; ChrNames.txt # Change chr names with bcftools bcftools annotate --rename-chrs ChrNames.txt in.vcf.gz "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
