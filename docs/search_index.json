[["index.html", "Standardized pipelines Introduction", " Standardized pipelines Victor Loegler 2023-07-17 Introduction This book references all the bioinformatics standardized pipelines of the HaploTeam. All pipelines that are widely used across multiple projects can be described here. The purpose of this book is to improve reproducibility of the analyses by using the same protocols for recurring tasks, such as short sequencing reads mapping or SNP filtering. "],["short-reads-mapping.html", "Chapter 1 Short reads mapping", " Chapter 1 Short reads mapping Required softwares: bwa-mem2 (bwa mem can be used, but is slower) samtools gatk Short reads mapping have to be done with bwa-mem2 mem (or bwa mem) default parameters. The output of bwa can be pipped with samtools sort to output a sorted bam. The -T option allow to give a specific name to temporary files created for the sorting, which allows to sort multiple fasta in parallel in the same directory without any name conflicts. # Create reference index bwa-mem2 index reference.fasta # Run mapping bwa-mem2 mem -t 20 reference.fasta IlluminaReads_1.fq/fa IlluminaReads_2.fq/fa | samtools sort -o output.bam -T reads.Prefix.tmp Once the BAM file is generated, one can add ReadGroups (required for some downstream analyses) with gatk AddOrReplaceReadGroups. # Add read groups gatk AddOrReplaceReadGroups -I input.bam -O output.bam --RGID SampleName --RGLB SampleName --RGPL ILLUMINA --RGPU SampleName --RGSM SampleName Finally, the bam file have to be indexed with samtools index. # Index BAM samtools index input.bam "],["snps-and-indels-calling.html", "Chapter 2 SNPs and INDELs calling", " Chapter 2 SNPs and INDELs calling For variant calling, please follow instructions on this page: https://gatk.broadinstitute.org/hc/en-us/articles/360035890411-Calling-variants-on-cohorts-of-samples-using-the-HaplotypeCaller-in-GVCF-mode The final step (4. Variant recalibration) does not have to be done. For many tools, it is better to have allposition in the final VCF (even non variant positions), which can be obtained using the --include-non-variant-sites when using the gatk GenotypeGVCFs command. "],["snp-and-indel-filtering.html", "Chapter 3 SNP and INDEL filtering 3.1 Quality filtering 3.2 Sample filtering 3.3 Missing genotype filtering 3.4 Filter on excess of heterozygosity 3.5 Split SNPs and INDELs 3.6 Filter variant position 3.7 Filtering biallelic sites 3.8 Filtering the MAF 3.9 Annotate variant ID 3.10 Change chromosome names", " Chapter 3 SNP and INDEL filtering This chapter contains bcftools commands to filter multi sample VCF files. These commands were tested using bcftools 1.15.1. bcftools manual: https://samtools.github.io/bcftools/bcftools.html The order in which the commands are executed must be respected. The raw VCF should first be filtered on the genotyping quality, then a subset of samples can be filtered if needed and finally several filters can be applied on the variants dataset (missing genotype filters, frequency filters, biallelic filters, etc). It is better to work with all-position VCFs, and filter variant position only in the end. WARNING: Each filter must be indicated in the file name. Example: full2489Samples.DP10.GQ20.SNPs.99pNonMissing.Biallelic.MAF5.vcf.gz The different commands can be combined with |. To accelerate the compression of the output VCF, the command bcftools view -Oz -o out.vcf.gz --threads 8can be used to parallelize the compression of the file. 3.1 Quality filtering Quality filtering is the first step to process. It includes depth filtering, genotype quality or any other filters based on quality metrics (QUAL, allele balance, etc). Loci that does not pass the thresholds must be set to missing. The allele count for each loci must then be updated bcftools +fill-tags. # Depth filtering 10X bcftools +setGT in.vcf.gz -- -t q -n . -e &#39;FMT/DP&gt;=10&#39; | \\ bcftools +fill-tags # Genotype quality filtering 20 bcftools +setGT in.vcf.gz -- -t q -n . -e &#39;FMT/GQ&gt;=20&#39; | \\ bcftools +fill-tags 3.2 Sample filtering If a subset of sample must be extracted from the VCF, this is the second step to process. The list of sample to keep must be in txt format, 1 sample per line. Because some variants might be present in the total population but absent from the subset, multiallelic loci must be split into biallelic records before sample filtering. Then, sample are filtered and only loci with an allele count superior to 0 will be kept. After that, variants located at the same loci will be re-merged into multiallelic variants. The bcftools norm -m -any command splits multiallelic records The bcftools view --samples-filecommand filters samples from a txt file The bcftools +fill-tags command updates the allele count value The bcftools view --min-ac 1 keeps only sites with a minimum allele count of 1 The bcftools norm -m +any command merge variant located at the same position # Sample filtering bcftools norm -m -any in.vcf.gz | \\ bcftools view --samples-file samples.txt | \\ bcftools +fill-tags | \\ bcftools view --min-ac 1 | \\ # This command filter out non variant loci bcftools norm -m +any 3.3 Missing genotype filtering Multiple filters can be done on missing genotypes. First we can filter out samples having less than X% of informed loci. Fill-tags must be used since the number of samples changes. # Get for each sample the number of loci with missing genotype bcftools stats -s - $PREFIX.DP10.GQ20.vcf.gz | grep -E ^PSC | cut -f3,14 &gt; $PREFIX.DP10.GQ20.imiss # Get the total number of sites in the VCF nSites=$(bcftools +counts $PREFIX.DP10.GQ20.vcf.gz | grep &quot;Number of sites&quot; | rev | cut -d &quot; &quot; -f 1 | rev) # List samples with less than 20% missing genotypes awk -v nSites=$nSites &#39;{if ($2 / nSites &lt;= 0.2) print $1}&#39; $PREFIX.DP10.GQ20.imiss &gt; Samples.Mind20 # Filter samples bcftools view --samples-file Samples.Mind20 $PREFIX.DP10.GQ20.vcf.gz | \\ bcftools +fill-tags Then we can filter loci that are not informed for enough samples (ex: filter out loci that are informed for less than 99% of the samples). # Keep only sites with more than 99% of genotyped samples bcftools view -i &#39;F_MISSING&lt;0.01&#39; 3.4 Filter on excess of heterozygosity Regions duplicated in some samples but in a single copy in the reference genome will often result in excess of heterozygosity. These regions can therefore be filtered with the ExcHet field, which tests for excess of heterozygosity and is calculated with fill-tags. This filter is usefull to avoid artificial increase in diversity caused by duplicated regions. bcftools +fill-tags | bcftools view -e &#39;ExcHet &lt; 0.99&#39; 3.5 Split SNPs and INDELs In raw VCFs, SNPs and INDELs can be hard to discriminate because they can be located at the same loci (called mixed loci). Some raw VCFs also contains MNVs (= Multiple Nucleotide Variants), that can be broken down in multiple consecutive SNPs. This makes the dicrimination between SNPs and INDELs very complex. Since those mixed loci are hard to analyse, we filter them out. The raw VCF will be split in 2 VCF: one containing only strict SNPs (no INDEL present at these loci in the population), one containing only strict INDELs (no SNP present at these loci in the population). Non variant positions, refered as REF type will be kept. For SNPs, all sites with * as genotype (= position is overlapping a deletion) or not SNP or REF as type will be excluded with the command 'ALT=\"*\" || (type!=\"snp\" &amp;&amp; type!=\"ref\")'. Same for INDELs, except *gontypes are kept: '(type!=\"indel\" &amp;&amp; type!=\"ref\")'. # Keep only SNPs bcftools view -e &#39;ALT=&quot;*&quot; || (type!=&quot;snp&quot; &amp;&amp; type!=&quot;ref&quot;)&#39; # Keep only INDELs bcftools view -e &#39;(type!=&quot;indel&quot; &amp;&amp; type!=&quot;ref&quot;)&#39; 3.6 Filter variant position Non variant position can be filtered out based on allele count (AC - must be up to date using fill-tags). # Keep only variant positions bcftools view --min-ac 1 3.7 Filtering biallelic sites Biallelic loci can be kept with the bcftools view command, keeping loci with minimum 2 alleles (-m2) and maximum 2 alleles (-M2). # Filter biallelic (minimum and maximum 2 alleles per loci) bcftools view -m2 -M2 in.vcf.gz 3.8 Filtering the MAF # Sites with a MAF lower are removed bcftools view --min-af 0.05:minor 3.9 Annotate variant ID Variants ID can be annotated at any step of the filtering process, but itâ€™s generally the lkast step of the pipeline. ID annotation must be done to be able to discriminate variants. # Set variant ID to rs_Chr_Pos_etc... bcftools annotate --set-id &#39;rs_%CHROM\\_%POS\\_%REF\\_%FIRST_ALT&#39; 3.10 Change chromosome names Some software such as PLINK requires integers as chromosome names. Chromosome names can be changed with bcftools annotate --rename-chrs # Create file that will contain name substitutions ( echo &quot;chromosome1 1&quot; echo &quot;chromosome2 2&quot; echo &quot;chromosome3 3&quot; echo &quot;chromosome4 4&quot; echo &quot;chromosome5 5&quot; echo &quot;chromosome6 6&quot; echo &quot;chromosome7 7&quot; echo &quot;chromosome8 8&quot; echo &quot;chromosome9 9&quot; echo &quot;chromosome10 10&quot; echo &quot;chromosome11 11&quot; echo &quot;chromosome12 12&quot; echo &quot;chromosome13 13&quot; echo &quot;chromosome14 14&quot; echo &quot;chromosome15 15&quot; echo &quot;chromosome16 16&quot;) &gt; ChrNames.txt # Change chr names with bcftools bcftools annotate --rename-chrs ChrNames.txt in.vcf.gz "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
